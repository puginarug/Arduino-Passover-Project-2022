// SHT3X:
#include <Arduino.h>
#include <Wire.h>
#include "Adafruit_SHT31.h"
#include <math.h>

Adafruit_SHT31 sht31 = Adafruit_SHT31();

//------------------------------------------------------------------
// DS18B20-like waterproof thermometer:

// Include the libraries we need
#include <OneWire.h>
#include <DallasTemperature.h>

// Data wire is connected to GPIO15
#define ONE_WIRE_BUS 15
// Setup a oneWire instance to communicate with a OneWire device
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);

DeviceAddress sensor1 = { 0x28, 0xB6, 0x21, 0x11, 0x0, 0x0, 0x0, 0x29 };

//------------------------------------------------------------------
//HC-SR04 Ultrasonic Sensor:

const int trigPin = 5;
const int echoPin = 18;

//define sound speed in cm/uS
#define SOUND_SPEED 0.034
#define CM_TO_INCH 0.393701

long duration;
float distanceCm;
float distanceInch;

//------------------------------------------------------------------
//Thingspeak:
// #include <ESP8266WiFi.h>
#include <WiFi.h>

#include "ThingSpeak.h"
unsigned long myChannelNumber = 1690479;
const char * myWriteAPIKey = "XBO457R9L2K4Y1FW";

const char* ssid = "HUJI-dorm"; // your wifi SSID name
const char* password = "" ;// wifi pasword
 
const char* server = "api.thingspeak.com";

WiFiClient client;

//------------------------------------------------------------------

void setup() {
  Serial.begin(9600);
  //------------------------------------------------------------------
  //Thingspeak and wifi:
  WiFi.disconnect();
  delay(10);
  WiFi.begin(ssid, password);

  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

    ThingSpeak.begin(client);
 
  WiFi.begin(ssid, password);
  
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("NodeMcu connected to wifi...");
  Serial.println(ssid);
  Serial.println();

  //------------------------------------------------------------------
  //SHT31:
  if (! sht31.begin(0x44)) {
    Serial.println("Couldn't find SHT31");
    while (1) delay(1);
  }

  //------------------------------------------------------------------
  //DS18B20-like waterproof thermometer:

  sensors.begin();
  
  //------------------------------------------------------------------
  //HC-SR04 Ultrasonic Sensor:
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  
}

void loop() {
//------------------------------------------------------------------
//SHT31:
  float t = sht31.readTemperature();
  float h = sht31.readHumidity();

  if (! isnan(t))  {
    Serial.print("Temp *C = "); Serial.println(t);
  }
  else  {
    Serial.println("Failed to read temperature");
  }
  
  if (! isnan(h))  {
  Serial.print("Hum. % = "); Serial.println(h);
  }
  else  {
  Serial.println("Failed to read humidity");
  }
  
  Serial.println();
  delay(5000);

//------------------------------------------------------------------
//DS18B20-like waterproof thermometer:
  Serial.print("Requesting temperatures...");
  sensors.requestTemperatures(); // Send the command to get temperatures
  Serial.println("DONE");
  
  Serial.print("Sensor 1(*C): ");
  Serial.print(sensors.getTempC(sensor1)); 
  Serial.print(" Sensor 1(*F): ");
  Serial.println(sensors.getTempF(sensor1)); 
  
  delay(5000);

//------------------------------------------------------------------
//VPD_IN:
  int base1 = 10;
  float power1 = (7.5*t)/(237.3+t);
  float answer1 = pow(base1, power1);
  
  float P_sat = 610.7*answer1;
  float VPD_pascal = (P_sat*(100-h))/100;
  float VPD_kilo_pascal = VPD_pascal/1000;

//VPD_OUT:
  int base2 = 10;
  float power2 = (7.5*sensors.getTempC(sensor1))/(237.3+sensors.getTempC(sensor1));
  float answer2 = pow(base2, power2);
  
  float P_sat2 = 610.7*answer2;
  float VPD_OUT_pascal = (P_sat2*(100-h))/100;
  float VPD_OUT_kilo_pascal = VPD_OUT_pascal/1000;

//------------------------------------------------------------------
//HC-SR04 Ultrasonic Sensor:
  // Clears the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  // Sets the trigPin on HIGH state for 10 micro seconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  
  // Calculate the distance
  distanceCm = duration * SOUND_SPEED/2;
  
  // Convert to inches
  distanceInch = distanceCm * CM_TO_INCH;
  
  // Prints the distance in the Serial Monitor
  Serial.print("Distance (cm): ");
  Serial.println(distanceCm);
  Serial.print("Distance (inch): ");
  Serial.println(distanceInch);
  
  delay(5000);
  
//------------------------------------------------------------------
//Thingspeak:
  ThingSpeak.setField(1,t); // SHT temp
  ThingSpeak.setField(2,sensors.getTempC(sensor1)); // DS18B20 outside temp
  ThingSpeak.setField(3,h); // SHT humidity
  ThingSpeak.setField(4,VPD_kilo_pascal); // VPD in kilopascal
  ThingSpeak.setField(5,VPD_OUT_kilo_pascal); // VPD outside in kilopascal (assuming same RH as inside)
  if (distanceCm < 400) {
      ThingSpeak.setField(6,distanceCm); // distance in cm from HC-SR04
  }
  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);

  Serial.println("uploaded to Thingspeak server....");

  client.stop();
 
  Serial.println("Waiting to upload next reading...");
  Serial.println();
  
  // thingspeak free needs minimum 15 sec delay between updates 
  // payed can do 1sec

  delay(5000);
}
 